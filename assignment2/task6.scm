(define (helper f s)
	(setNilDisplay 'nil)
	(if (null? (cdr f))
		(cons (cons s (car f)) nil)
		(if (null? (car f))
			(cons (cons s nil) (helper (cdr f) s))
			(cons (cons s (car f)) (helper (cdr f) s))
		)
	)
)

(define (powerSet a)
	(setNilDisplay 'nil)
	(if (null? (cdr a))
		(cons '() (cons a nil))
		(merge 
			(powerSet (cdr a)) 
			(helper (powerSet (cdr a)) (car a))
		)
	)
)
(define (merge a b)
	(setNilDisplay 'nil)
	(if (null? a);;(if (null? i) also working
		b
		(if (null? b);;(if (null? j) also working
			b
			(if (null? (car a) ) 
				(cons '() (merge (cdr a) b))
				(if (<= (length (car b)) (length (car a)))
					(cons (car b) (merge a (cdr b)))
					(cons (car a) (merge (cdr a) b))
				)
			)
		)
	)
)

(define (main)
	(setNilDisplay 'nil)
	(setPort (open (getElement ScamArgs 1) 'read))
	(define env this)
	(define (iter expr)
		(if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
	)
	(iter (readExpr))
)
