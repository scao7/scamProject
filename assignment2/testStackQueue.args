; read some ints and place them in both a stack and queue
(define (loop stack queue)
(define x (readInt))
(if (eof?)
(list stack queue)
(loop (push stack x) (enqueue queue x))
)
)
; empty out a stack, printing the values as they come off
(define (popper s mode)
(cond
((!= (ssize s) 0)
(if (= mode 1) (inspect (speek s)))
(popper (pop s) mode)
)
)
)
; empty out a queue, printing the values as they come off
(define (dequeuer q mode)
(cond
((!= (qsize q) 0)
(if (= mode 1) (inspect (qpeek q)))
(dequeuer (dequeue q) mode)
)
)
)
