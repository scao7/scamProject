
;task 7
; returns a number that is twice n
(define (double n) (+ n n))
;(define (halve x)

;	(define (outer d i)
;		(define ( inner a b)
;			;(inspect a)
			;(inspect b)
;			(if(and (!= a x) (!= a (- x 1)) (!= a (- x 2)))
;				(inner (- a 2) ( - b 1)) 
;				b
;			)
;		)
;		i
;		(if(< d x) 
;			(outer (double d) (+ i i))
;			(inner (- d 2) (- i 1))
;		)
;		
;	)
;	(outer 2 1)
;)
 ;(define (halve x)
;	(/ x 2)
; )
(define (halve a)
	(define (getPower power val a)
		;(inspect val);
		;(inspect  a);
		(cond 
			;(( < (double val) a) (getPower (+ power 1) ( double val)))
			;((and (> a 0) (< a 2)) (getPower (+ power 0)(+ val 0) (- a 0)) )
			;(( <= a 0) val )
			((and (>= a 2) (< a 4)) (getPower power (+ val 1) (- a 2)))
			((and (>= a 4) (< a 8)) (getPower power (+ val 2) (- a 4)))
			((and (>= a 8) (< a 16)) (getPower power (+ val 4) (- a 8)))
			((and (>= a 16) (< a 32)) (getPower power (+ val 8) (- a 16)))
			((and (>= a 32) (< a 64)) (getPower power (+ val 16) (- a 32)))
			((and (>= a 64) (< a 128)) (getPower power (+ val 32) (- a 64)))
			((and (>= a 128) (< a 256)) (getPower power (+ val 64) (- a 128)))
			((and (>= a 256) (< a 512)) (getPower power (+ val 128) (- a 256)))
			((and (>= a 512) (< a 1024)) (getPower power (+ val 256) (- a 512)))
			((and (>= a 1024) (< a 2048)) (getPower power (+ val 512) (- a 1024)))
			((and (>= a 2048) (< a 4096))  (getPower power (+ val 1024) (- a 2048)))
			((and (>= a 4096) (< a 8192)) (getPower power (+ val 2048) (- a 4096)))
			((and (>= a 8192) (< a 16384))  (getPower power (+ val 4096) (- a 8192)))
			((and (>= a 16384) (< a 32768))  (getPower power (+ val 8192) (- a 16384)))
			((and (>= a 32768) (< a 65536))  (getPower power (+ val 16384) (- a 32768)))
			((and (>= a 65536) (< a 131072))  (getPower power (+ val 32768) (- a 65536)))
			((and (>= a 131072) (< a 262144))  (getPower power (+ val 65536) (- a 131072)))
			((and (>= a 262144) (< a 524288))  (getPower power (+ val 131072) (- a 262144)))
			((and (>= a 524288) (< a 1048576))  (getPower power (+ val 262144) (- a 524288)))
			((and (>= a 1048576) (< a 2097152))  (getPower power (+ val 524288) (- a 1048576)))
			((and (>= a 2097152) (< a 4194304))  (getPower power (+ val 1048576) (- a 2097152)))
			((and (>= a 4194304) (< a 8388608))  (getPower power (+ val 2097152) (- a 4194304)))
			((and (>= a 8388608) (< a 16777216))  (getPower power (+ val 4194304) (- a 8388608)))
			((and (>= a 16777216) (< a 33554432))  (getPower power (+ val 8388608) (- a 16777216)))
			((and (>= a 33554432) (< a 67108864))  (getPower power (+ val 16777216) (- a 33554432)))
			((and (>= a 67108864) (< a 134217728))  (getPower power (+ val 33554432) (- a 67108864)))
			((and (>= a 134217728) (< a 268435456))  (getPower power (+ val 67108864) (- a 134217728)))
			((and (>= a 268435456) (< a 536870912))  (getPower power (+ val 134217728) (- a 268435456)))
			((and (>= a 536870912) (< a 1073741824))  (getPower power (+ val 268435456) (- a 536870912)))
			((and (>= a 1073741824) (< a 2147483648))  (getPower power (+ val 536870912) (- a 1073741824)))
			(else val)
		)
	)
	
	(define (iter val)
		;(inspect val)
		(cond 
			((= (double val) a) val)
			((= (double val) (- a 1)) val)
			(else (iter (+ val 1)))
		)
	)
	(iter (getPower 0 0 a))

)


(define (div2? n) (= (halve n) (halve (+ n 1))))

(define (ethiop a b)
(define (iter a b store)
    (cond
        ((= b 1) (+ store a))
        ((div2? b) (iter (double a) (halve b) store))
        (else (iter (double a) (halve b) (+ a store)))
        )
    )
	(iter a b 0)
)

(define (main)
	(setPort (open (getElement ScamArgs 1) 'read))
	(define arg1 (readExpr))
	(define arg2 (readExpr))
	
	(println "(halve " arg1 ") is " (halve arg1))
	(println "(double " arg1 ") is " (double arg1))
	(println "(div2? " arg1 ") is " (div2? arg1))
	(println "(ethiop " arg1 " " arg2 ") is " (ethiop arg1 arg2)))

