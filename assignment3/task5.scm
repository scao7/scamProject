(define (smush streamlist op)
    (define (accum-stream streamlist in)
        (define cur (op in (stream-car streamlist)))
        (cons-stream cur (accum-stream (stream-cdr streamlist) cur))
        )
    (define ones (cons-stream 1 ones))
    (define wholes (cons-stream 0 (add-streams ones wholes)))
    (define temp (cons-stream (stream-car streamlist) (accum-stream (stream-cdr streamlist) (stream-car streamlist))))
    (cons-stream (stream-car wholes) (triplet (stream-cdr wholes) streamlist temp 1))
)

(define (sdisplay n z)
    (define (iter x m)
	(if (= m 0) 
		(print "...")
	    (begin
                (print (stream-car x) ",")
                (iter (stream-cdr x) (- m 1))
            )
        )
    )
    (print "(")
    (iter z n)
    (print ")")
    )

(define (add-streams s t)
    (cons-stream
        (+ (stream-car s) (stream-car t))
        (add-streams (stream-cdr s) (stream-cdr t))
        )
    )

(define (triplet a b c z)
    (cond
        ((= z 0) (cons-stream (stream-car a) (triplet (stream-cdr a) b c 1)))
        ((= z 1) (cons-stream (stream-car b) (triplet a (stream-cdr b) c 2)))
        ((= z 2) (cons-stream (stream-car c) (triplet a b (stream-cdr c) 0)))
        )
    )


(define (main)
    (define env this)
    (define (iter expr)
         (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
         )
    (setPort (open (getElement ScamArgs 1) 'read))
    (iter (readExpr))
    )
