(define (sdisplay n z)
    (define (iter x m)
        (if (= m 0)  
                (print "...")
            (begin
                (print (stream-car x) ",")
                (iter (stream-cdr x) (- m 1)) 
            )
        )
    )   
    (print "(")
    (iter z n)
    (print ")")
)  

(define (quad a b c step)
    (define (square x) (* x x))
    (define (get-f val) (+ (* a (square val)) (* b val) c))
    (define (stepper s)
        (cons-stream (+ (stream-car s) (real step)) (stepper (stream-cdr s)))
        )
    (define (f-stream s)
        (cons-stream (get-f (stream-car s)) (f-stream (stream-cdr s)))
        )
    (define x (cons-stream (real 0.0) (stepper x)))
    (define f (cons-stream (get-f (stream-car x)) (f-stream (stream-cdr x))))
)


(define (integrate s height)
    (define (trapzoid top base)(* (/ (+ top base) 2.0) height))
    (define (integ-help st self)
        (cons-stream (+ (stream-car self) (trapzoid (stream-car st) (stream-car (stream-cdr st)))) (integ-help (stream-cdr st) (stream-cdr self)))
        )
    (define integ (cons-stream (real 0.0) (integ-help s integ)))
)


(define (derivate s step f0)
    (define (undo integ top)
        (- (* (/ integ step) 2.0) top)
     )
    (define (deriv s step top)
        (let ((trap (- (stream-car (stream-cdr s)) (stream-car s))))
            (define base (undo trap top))
            (cons-stream base (deriv (stream-cdr s) step base))
            )
        )
    (cons-stream (real f0) (deriv s step f0))
    )

(define (same-stream? s1 s2 n t)
    (cond
        ((= n 0) #t)
        ((<= (abs (- (stream-car s1) (stream-car s2))) t) (same-stream? (stream-cdr s1) (stream-cdr s2) (- n 1) t))
        (else #f)
        )
)


(define (main)
    (define env this)
    (define (iter expr)
         (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
         )
    (setPort (open (getElement ScamArgs 1) 'read))
    (iter (readExpr))
    )
