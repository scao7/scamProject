(define (node value left right)
	(define (display) (print value))
	this
)
(define (newBST value)
	(node value nil nil)
)
(define (displayBST root)
	(define (iter root indent)
		(if (valid? root)
			(begin
			(iter (root 'right) (string+ indent " "))
			(print indent)
			((root 'display))
			(println)
			(iter (root 'left) (string+ indent " "))
			)
		)
	)
	(iter root "")
)
(define (getLeft t)
	(getleft t)
)
(define (getRight t)
	(get 'right t)
)
(define (getValue t)
	(get 'value t)
)
(define (insertBST root val)
	(if (valid? root)
	(node (root 'value) (insertBST (root 'left) val)(root 'right))
	)

)
 
(define (main)
       ; (setPort (open (getElement ScamArgs 1) 'read))
       ; (define env this)
    ;(define (iter expr)
    ;     (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
    ;     )
    ;(iter (readExpr))
(define t0 (newBST 5)) 
(define t1 (insertBST t0 2)) 
(define t2 (insertBST t1 8)) 
(displayBST t2) 	 
	(ppTable node)
  )
